// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// colMedian_cpp
NumericVector colMedian_cpp(arma::mat& x);
RcppExport SEXP pcadapt_colMedian_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(colMedian_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// Erho_cpp
double Erho_cpp(double b);
RcppExport SEXP pcadapt_Erho_cpp(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(Erho_cpp(b));
    return rcpp_result_gen;
END_RCPP
}
// Es2_cpp
double Es2_cpp(double c);
RcppExport SEXP pcadapt_Es2_cpp(SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(Es2_cpp(c));
    return rcpp_result_gen;
END_RCPP
}
// scaleTau2_matrix
Rcpp::List scaleTau2_matrix(arma::mat& x);
RcppExport SEXP pcadapt_scaleTau2_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(scaleTau2_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// scaleTau2_vector
NumericVector scaleTau2_vector(arma::vec& x);
RcppExport SEXP pcadapt_scaleTau2_vector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(scaleTau2_vector(x));
    return rcpp_result_gen;
END_RCPP
}
// covGK_cpp
double covGK_cpp(arma::vec x, arma::vec y);
RcppExport SEXP pcadapt_covGK_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(covGK_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// ogk_step
Rcpp::List ogk_step(arma::mat& x);
RcppExport SEXP pcadapt_ogk_step(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ogk_step(x));
    return rcpp_result_gen;
END_RCPP
}
// getDistance_cpp
arma::vec getDistance_cpp(arma::mat& x, arma::rowvec center, arma::mat cov);
RcppExport SEXP pcadapt_getDistance_cpp(SEXP xSEXP, SEXP centerSEXP, SEXP covSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type center(centerSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov(covSEXP);
    rcpp_result_gen = Rcpp::wrap(getDistance_cpp(x, center, cov));
    return rcpp_result_gen;
END_RCPP
}
// covRob_cpp
Rcpp::List covRob_cpp(arma::mat& x);
RcppExport SEXP pcadapt_covRob_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(covRob_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// print_convert
void print_convert(std::string input, std::string output, int M, int N, int pool);
RcppExport SEXP pcadapt_print_convert(SEXP inputSEXP, SEXP outputSEXP, SEXP MSEXP, SEXP NSEXP, SEXP poolSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::string >::type output(outputSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type pool(poolSEXP);
    print_convert(input, output, M, N, pool);
    return R_NilValue;
END_RCPP
}
// ped2pcadapt
int ped2pcadapt(std::string input, std::string output);
RcppExport SEXP pcadapt_ped2pcadapt(SEXP inputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::string >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(ped2pcadapt(input, output));
    return rcpp_result_gen;
END_RCPP
}
// lfmm2pcadapt
int lfmm2pcadapt(std::string input, std::string output);
RcppExport SEXP pcadapt_lfmm2pcadapt(SEXP inputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::string >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(lfmm2pcadapt(input, output));
    return rcpp_result_gen;
END_RCPP
}
// sample_geno_matrix
NumericMatrix sample_geno_matrix(NumericMatrix freq, double ploidy, IntegerVector sample_size);
RcppExport SEXP pcadapt_sample_geno_matrix(SEXP freqSEXP, SEXP ploidySEXP, SEXP sample_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< double >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sample_size(sample_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_geno_matrix(freq, ploidy, sample_size));
    return rcpp_result_gen;
END_RCPP
}
// get_size_cpp
NumericVector get_size_cpp(std::string filename);
RcppExport SEXP pcadapt_get_size_cpp(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_size_cpp(filename));
    return rcpp_result_gen;
END_RCPP
}
// cmpt_cov_cpp
Rcpp::List cmpt_cov_cpp(std::string filename, arma::mat& xmatrix, double min_maf, int ploidy, int type);
RcppExport SEXP pcadapt_cmpt_cov_cpp(SEXP filenameSEXP, SEXP xmatrixSEXP, SEXP min_mafSEXP, SEXP ploidySEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xmatrix(xmatrixSEXP);
    Rcpp::traits::input_parameter< double >::type min_maf(min_mafSEXP);
    Rcpp::traits::input_parameter< int >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cmpt_cov_cpp(filename, xmatrix, min_maf, ploidy, type));
    return rcpp_result_gen;
END_RCPP
}
// lrfunc_cpp
Rcpp::List lrfunc_cpp(std::string filename, arma::mat& xmatrix, arma::mat& scores, int nIND, int nSNP, int K, int ploidy, double min_maf, arma::vec& sigma, int type);
RcppExport SEXP pcadapt_lrfunc_cpp(SEXP filenameSEXP, SEXP xmatrixSEXP, SEXP scoresSEXP, SEXP nINDSEXP, SEXP nSNPSEXP, SEXP KSEXP, SEXP ploidySEXP, SEXP min_mafSEXP, SEXP sigmaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xmatrix(xmatrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< int >::type nIND(nINDSEXP);
    Rcpp::traits::input_parameter< int >::type nSNP(nSNPSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< double >::type min_maf(min_mafSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(lrfunc_cpp(filename, xmatrix, scores, nIND, nSNP, K, ploidy, min_maf, sigma, type));
    return rcpp_result_gen;
END_RCPP
}
// sample_geno_file
NumericVector sample_geno_file(std::string input, std::string output, double ploidy, IntegerVector sample_size);
RcppExport SEXP pcadapt_sample_geno_file(SEXP inputSEXP, SEXP outputSEXP, SEXP ploidySEXP, SEXP sample_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::string >::type output(outputSEXP);
    Rcpp::traits::input_parameter< double >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sample_size(sample_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_geno_file(input, output, ploidy, sample_size));
    return rcpp_result_gen;
END_RCPP
}
// get_geno_char
CharacterVector get_geno_char(CharacterVector allele_sep);
RcppExport SEXP pcadapt_get_geno_char(SEXP allele_sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type allele_sep(allele_sepSEXP);
    rcpp_result_gen = Rcpp::wrap(get_geno_char(allele_sep));
    return rcpp_result_gen;
END_RCPP
}
// get_geno_int
IntegerVector get_geno_int(CharacterVector allele_sep);
RcppExport SEXP pcadapt_get_geno_int(SEXP allele_sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type allele_sep(allele_sepSEXP);
    rcpp_result_gen = Rcpp::wrap(get_geno_int(allele_sep));
    return rcpp_result_gen;
END_RCPP
}
// check_line_na
int check_line_na(CharacterVector string_geno_row, CharacterVector geno_char);
RcppExport SEXP pcadapt_check_line_na(SEXP string_geno_rowSEXP, SEXP geno_charSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type string_geno_row(string_geno_rowSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type geno_char(geno_charSEXP);
    rcpp_result_gen = Rcpp::wrap(check_line_na(string_geno_row, geno_char));
    return rcpp_result_gen;
END_RCPP
}
// vcf_convert
int vcf_convert(CharacterMatrix string_geno, std::string output, CharacterVector allele_sep);
RcppExport SEXP pcadapt_vcf_convert(SEXP string_genoSEXP, SEXP outputSEXP, SEXP allele_sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type string_geno(string_genoSEXP);
    Rcpp::traits::input_parameter< std::string >::type output(outputSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type allele_sep(allele_sepSEXP);
    rcpp_result_gen = Rcpp::wrap(vcf_convert(string_geno, output, allele_sep));
    return rcpp_result_gen;
END_RCPP
}
