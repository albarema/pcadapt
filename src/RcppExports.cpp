// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cmpt_cov_cpp
Rcpp::List cmpt_cov_cpp(std::string filename, arma::mat& xmatrix, double min_maf, int ploidy, int type, int blocksize);
RcppExport SEXP pcadapt_cmpt_cov_cpp(SEXP filenameSEXP, SEXP xmatrixSEXP, SEXP min_mafSEXP, SEXP ploidySEXP, SEXP typeSEXP, SEXP blocksizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xmatrix(xmatrixSEXP);
    Rcpp::traits::input_parameter< double >::type min_maf(min_mafSEXP);
    Rcpp::traits::input_parameter< int >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type blocksize(blocksizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cmpt_cov_cpp(filename, xmatrix, min_maf, ploidy, type, blocksize));
    return rcpp_result_gen;
END_RCPP
}
// cart2bary_cpp
arma::mat cart2bary_cpp(arma::mat& X, arma::mat& P);
RcppExport SEXP pcadapt_cart2bary_cpp(SEXP XSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(cart2bary_cpp(X, P));
    return rcpp_result_gen;
END_RCPP
}
// median_row_i
double median_row_i(const arma::mat& x, int i);
RcppExport SEXP pcadapt_median_row_i(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(median_row_i(x, i));
    return rcpp_result_gen;
END_RCPP
}
// median_per_pop
NumericVector median_per_pop(const arma::mat& x, const arma::vec& lab, const arma::vec& pop, int i);
RcppExport SEXP pcadapt_median_per_pop(SEXP xSEXP, SEXP labSEXP, SEXP popSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lab(labSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pop(popSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(median_per_pop(x, lab, pop, i));
    return rcpp_result_gen;
END_RCPP
}
// check_row
int check_row(const arma::mat& x, int i);
RcppExport SEXP pcadapt_check_row(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(check_row(x, i));
    return rcpp_result_gen;
END_RCPP
}
// impute_geno
Rcpp::List impute_geno(const arma::mat& x);
RcppExport SEXP pcadapt_impute_geno(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(impute_geno(x));
    return rcpp_result_gen;
END_RCPP
}
// impute_geno_pop
Rcpp::List impute_geno_pop(const arma::mat& x, const arma::vec& lab, const arma::vec& pop);
RcppExport SEXP pcadapt_impute_geno_pop(SEXP xSEXP, SEXP labSEXP, SEXP popSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lab(labSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pop(popSEXP);
    rcpp_result_gen = Rcpp::wrap(impute_geno_pop(x, lab, pop));
    return rcpp_result_gen;
END_RCPP
}
// get_window
IntegerVector get_window(int i, const arma::vec& map, const double window_size);
RcppExport SEXP pcadapt_get_window(SEXP iSEXP, SEXP mapSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type map(mapSEXP);
    Rcpp::traits::input_parameter< const double >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_window(i, map, window_size));
    return rcpp_result_gen;
END_RCPP
}
// cmpt_global_pca
arma::mat cmpt_global_pca(const arma::mat& geno, const arma::mat& V, const arma::vec& sigma);
RcppExport SEXP pcadapt_cmpt_global_pca(SEXP genoSEXP, SEXP VSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type geno(genoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(cmpt_global_pca(geno, V, sigma));
    return rcpp_result_gen;
END_RCPP
}
// cmpt_local_pca
arma::mat cmpt_local_pca(const arma::mat& geno, const arma::mat& V, const arma::vec& sigma, const int beg, const int end);
RcppExport SEXP pcadapt_cmpt_local_pca(SEXP genoSEXP, SEXP VSEXP, SEXP sigmaSEXP, SEXP begSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type geno(genoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int >::type beg(begSEXP);
    Rcpp::traits::input_parameter< const int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(cmpt_local_pca(geno, V, sigma, beg, end));
    return rcpp_result_gen;
END_RCPP
}
// updt_local_scores
void updt_local_scores(arma::mat& u, const arma::mat& geno, const arma::mat& V, const arma::vec& sigma, const int beg_old, const int end_old, const int beg_new, const int end_new);
RcppExport SEXP pcadapt_updt_local_scores(SEXP uSEXP, SEXP genoSEXP, SEXP VSEXP, SEXP sigmaSEXP, SEXP beg_oldSEXP, SEXP end_oldSEXP, SEXP beg_newSEXP, SEXP end_newSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type geno(genoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int >::type beg_old(beg_oldSEXP);
    Rcpp::traits::input_parameter< const int >::type end_old(end_oldSEXP);
    Rcpp::traits::input_parameter< const int >::type beg_new(beg_newSEXP);
    Rcpp::traits::input_parameter< const int >::type end_new(end_newSEXP);
    updt_local_scores(u, geno, V, sigma, beg_old, end_old, beg_new, end_new);
    return R_NilValue;
END_RCPP
}
// colMedian_cpp
NumericVector colMedian_cpp(arma::mat& x);
RcppExport SEXP pcadapt_colMedian_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(colMedian_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// Erho_cpp
double Erho_cpp(double b);
RcppExport SEXP pcadapt_Erho_cpp(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(Erho_cpp(b));
    return rcpp_result_gen;
END_RCPP
}
// Es2_cpp
double Es2_cpp(double c);
RcppExport SEXP pcadapt_Es2_cpp(SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(Es2_cpp(c));
    return rcpp_result_gen;
END_RCPP
}
// scaleTau2_matrix
Rcpp::List scaleTau2_matrix(arma::mat& x);
RcppExport SEXP pcadapt_scaleTau2_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(scaleTau2_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// scaleTau2_vector
NumericVector scaleTau2_vector(arma::vec& x);
RcppExport SEXP pcadapt_scaleTau2_vector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(scaleTau2_vector(x));
    return rcpp_result_gen;
END_RCPP
}
// covGK_cpp
double covGK_cpp(arma::vec x, arma::vec y);
RcppExport SEXP pcadapt_covGK_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(covGK_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// ogk_step
Rcpp::List ogk_step(arma::mat& x);
RcppExport SEXP pcadapt_ogk_step(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ogk_step(x));
    return rcpp_result_gen;
END_RCPP
}
// getDistance_cpp
arma::vec getDistance_cpp(arma::mat& x, arma::rowvec center, arma::mat cov);
RcppExport SEXP pcadapt_getDistance_cpp(SEXP xSEXP, SEXP centerSEXP, SEXP covSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type center(centerSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov(covSEXP);
    rcpp_result_gen = Rcpp::wrap(getDistance_cpp(x, center, cov));
    return rcpp_result_gen;
END_RCPP
}
// covRob_cpp
Rcpp::List covRob_cpp(arma::mat& x);
RcppExport SEXP pcadapt_covRob_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(covRob_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// print_convert
void print_convert(std::string input, std::string output, int M, int N, int pool);
RcppExport SEXP pcadapt_print_convert(SEXP inputSEXP, SEXP outputSEXP, SEXP MSEXP, SEXP NSEXP, SEXP poolSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::string >::type output(outputSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type pool(poolSEXP);
    print_convert(input, output, M, N, pool);
    return R_NilValue;
END_RCPP
}
// ped2pcadapt
int ped2pcadapt(std::string input, std::string output);
RcppExport SEXP pcadapt_ped2pcadapt(SEXP inputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::string >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(ped2pcadapt(input, output));
    return rcpp_result_gen;
END_RCPP
}
// lfmm2pcadapt
int lfmm2pcadapt(std::string input, std::string output);
RcppExport SEXP pcadapt_lfmm2pcadapt(SEXP inputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::string >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(lfmm2pcadapt(input, output));
    return rcpp_result_gen;
END_RCPP
}
// sample_geno_matrix
NumericMatrix sample_geno_matrix(NumericMatrix freq, double ploidy, IntegerVector sample_size);
RcppExport SEXP pcadapt_sample_geno_matrix(SEXP freqSEXP, SEXP ploidySEXP, SEXP sample_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< double >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sample_size(sample_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_geno_matrix(freq, ploidy, sample_size));
    return rcpp_result_gen;
END_RCPP
}
// get_pop_size
IntegerVector get_pop_size(const StringVector& pop, const StringVector& popUnique);
RcppExport SEXP pcadapt_get_pop_size(SEXP popSEXP, SEXP popUniqueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const StringVector& >::type pop(popSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type popUnique(popUniqueSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pop_size(pop, popUnique));
    return rcpp_result_gen;
END_RCPP
}
// updt_centroids_cpp
void updt_centroids_cpp(arma::mat& centroids, const arma::mat& scores, const StringVector& pop, const StringVector& popUnique, const IntegerVector& popSize, int K);
RcppExport SEXP pcadapt_updt_centroids_cpp(SEXP centroidsSEXP, SEXP scoresSEXP, SEXP popSEXP, SEXP popUniqueSEXP, SEXP popSizeSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type centroids(centroidsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type pop(popSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type popUnique(popUniqueSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type popSize(popSizeSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    updt_centroids_cpp(centroids, scores, pop, popUnique, popSize, K);
    return R_NilValue;
END_RCPP
}
// updt_simplex_cpp
void updt_simplex_cpp(arma::mat& simplex, const arma::mat& centroids, const StringVector& popUnique, const CharacterVector& admixed);
RcppExport SEXP pcadapt_updt_simplex_cpp(SEXP simplexSEXP, SEXP centroidsSEXP, SEXP popUniqueSEXP, SEXP admixedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type simplex(simplexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type centroids(centroidsSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type popUnique(popUniqueSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type admixed(admixedSEXP);
    updt_simplex_cpp(simplex, centroids, popUnique, admixed);
    return R_NilValue;
END_RCPP
}
// slidingWindows_fast
arma::mat slidingWindows_fast(const arma::mat& sgeno, const arma::vec& d, const arma::mat& v, const StringVector& pop, const StringVector& popUnique, const CharacterVector& admixed, const int window_size, const arma::vec map);
RcppExport SEXP pcadapt_slidingWindows_fast(SEXP sgenoSEXP, SEXP dSEXP, SEXP vSEXP, SEXP popSEXP, SEXP popUniqueSEXP, SEXP admixedSEXP, SEXP window_sizeSEXP, SEXP mapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type sgeno(sgenoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type pop(popSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type popUnique(popUniqueSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type admixed(admixedSEXP);
    Rcpp::traits::input_parameter< const int >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type map(mapSEXP);
    rcpp_result_gen = Rcpp::wrap(slidingWindows_fast(sgeno, d, v, pop, popUnique, admixed, window_size, map));
    return rcpp_result_gen;
END_RCPP
}
// get_size_cpp
NumericVector get_size_cpp(std::string filename);
RcppExport SEXP pcadapt_get_size_cpp(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_size_cpp(filename));
    return rcpp_result_gen;
END_RCPP
}
// get_nb_ind
int get_nb_ind(const StringVector& pop, const CharacterVector& name);
RcppExport SEXP pcadapt_get_nb_ind(SEXP popSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const StringVector& >::type pop(popSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_nb_ind(pop, name));
    return rcpp_result_gen;
END_RCPP
}
// cmpt_minor_af
NumericVector cmpt_minor_af(arma::mat& xmatrix, int ploidy);
RcppExport SEXP pcadapt_cmpt_minor_af(SEXP xmatrixSEXP, SEXP ploidySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type xmatrix(xmatrixSEXP);
    Rcpp::traits::input_parameter< int >::type ploidy(ploidySEXP);
    rcpp_result_gen = Rcpp::wrap(cmpt_minor_af(xmatrix, ploidy));
    return rcpp_result_gen;
END_RCPP
}
// scale_geno
arma::mat scale_geno(arma::mat& xmatrix, int ploidy, arma::vec maf, arma::vec keep_or_not);
RcppExport SEXP pcadapt_scale_geno(SEXP xmatrixSEXP, SEXP ploidySEXP, SEXP mafSEXP, SEXP keep_or_notSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type xmatrix(xmatrixSEXP);
    Rcpp::traits::input_parameter< int >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type maf(mafSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type keep_or_not(keep_or_notSEXP);
    rcpp_result_gen = Rcpp::wrap(scale_geno(xmatrix, ploidy, maf, keep_or_not));
    return rcpp_result_gen;
END_RCPP
}
// cmpt_loadings
arma::mat cmpt_loadings(std::string filename, arma::mat& xmatrix, arma::mat& scores, int nIND, int nSNP, int K, int ploidy, double min_maf, arma::vec& sigma, int type);
RcppExport SEXP pcadapt_cmpt_loadings(SEXP filenameSEXP, SEXP xmatrixSEXP, SEXP scoresSEXP, SEXP nINDSEXP, SEXP nSNPSEXP, SEXP KSEXP, SEXP ploidySEXP, SEXP min_mafSEXP, SEXP sigmaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xmatrix(xmatrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< int >::type nIND(nINDSEXP);
    Rcpp::traits::input_parameter< int >::type nSNP(nSNPSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< double >::type min_maf(min_mafSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cmpt_loadings(filename, xmatrix, scores, nIND, nSNP, K, ploidy, min_maf, sigma, type));
    return rcpp_result_gen;
END_RCPP
}
// lrfunc_cpp
Rcpp::List lrfunc_cpp(std::string filename, arma::mat& xmatrix, arma::mat& scores, int nIND, int nSNP, int K, int ploidy, double min_maf, arma::vec& sigma, int type);
RcppExport SEXP pcadapt_lrfunc_cpp(SEXP filenameSEXP, SEXP xmatrixSEXP, SEXP scoresSEXP, SEXP nINDSEXP, SEXP nSNPSEXP, SEXP KSEXP, SEXP ploidySEXP, SEXP min_mafSEXP, SEXP sigmaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xmatrix(xmatrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< int >::type nIND(nINDSEXP);
    Rcpp::traits::input_parameter< int >::type nSNP(nSNPSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< double >::type min_maf(min_mafSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(lrfunc_cpp(filename, xmatrix, scores, nIND, nSNP, K, ploidy, min_maf, sigma, type));
    return rcpp_result_gen;
END_RCPP
}
// sample_geno_file
NumericVector sample_geno_file(std::string input, std::string output, double ploidy, IntegerVector sample_size);
RcppExport SEXP pcadapt_sample_geno_file(SEXP inputSEXP, SEXP outputSEXP, SEXP ploidySEXP, SEXP sample_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::string >::type output(outputSEXP);
    Rcpp::traits::input_parameter< double >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sample_size(sample_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_geno_file(input, output, ploidy, sample_size));
    return rcpp_result_gen;
END_RCPP
}
// get_geno_char
CharacterVector get_geno_char(CharacterVector allele_sep);
RcppExport SEXP pcadapt_get_geno_char(SEXP allele_sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type allele_sep(allele_sepSEXP);
    rcpp_result_gen = Rcpp::wrap(get_geno_char(allele_sep));
    return rcpp_result_gen;
END_RCPP
}
// get_geno_int
IntegerVector get_geno_int(CharacterVector allele_sep);
RcppExport SEXP pcadapt_get_geno_int(SEXP allele_sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type allele_sep(allele_sepSEXP);
    rcpp_result_gen = Rcpp::wrap(get_geno_int(allele_sep));
    return rcpp_result_gen;
END_RCPP
}
// check_line_na
int check_line_na(CharacterVector string_geno_row, CharacterVector geno_char);
RcppExport SEXP pcadapt_check_line_na(SEXP string_geno_rowSEXP, SEXP geno_charSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type string_geno_row(string_geno_rowSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type geno_char(geno_charSEXP);
    rcpp_result_gen = Rcpp::wrap(check_line_na(string_geno_row, geno_char));
    return rcpp_result_gen;
END_RCPP
}
// vcf_convert
int vcf_convert(CharacterMatrix string_geno, std::string output, CharacterVector allele_sep);
RcppExport SEXP pcadapt_vcf_convert(SEXP string_genoSEXP, SEXP outputSEXP, SEXP allele_sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type string_geno(string_genoSEXP);
    Rcpp::traits::input_parameter< std::string >::type output(outputSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type allele_sep(allele_sepSEXP);
    rcpp_result_gen = Rcpp::wrap(vcf_convert(string_geno, output, allele_sep));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"pcadapt_cmpt_cov_cpp", (DL_FUNC) &pcadapt_cmpt_cov_cpp, 6},
    {"pcadapt_cart2bary_cpp", (DL_FUNC) &pcadapt_cart2bary_cpp, 2},
    {"pcadapt_median_row_i", (DL_FUNC) &pcadapt_median_row_i, 2},
    {"pcadapt_median_per_pop", (DL_FUNC) &pcadapt_median_per_pop, 4},
    {"pcadapt_check_row", (DL_FUNC) &pcadapt_check_row, 2},
    {"pcadapt_impute_geno", (DL_FUNC) &pcadapt_impute_geno, 1},
    {"pcadapt_impute_geno_pop", (DL_FUNC) &pcadapt_impute_geno_pop, 3},
    {"pcadapt_get_window", (DL_FUNC) &pcadapt_get_window, 3},
    {"pcadapt_cmpt_global_pca", (DL_FUNC) &pcadapt_cmpt_global_pca, 3},
    {"pcadapt_cmpt_local_pca", (DL_FUNC) &pcadapt_cmpt_local_pca, 5},
    {"pcadapt_updt_local_scores", (DL_FUNC) &pcadapt_updt_local_scores, 8},
    {"pcadapt_colMedian_cpp", (DL_FUNC) &pcadapt_colMedian_cpp, 1},
    {"pcadapt_Erho_cpp", (DL_FUNC) &pcadapt_Erho_cpp, 1},
    {"pcadapt_Es2_cpp", (DL_FUNC) &pcadapt_Es2_cpp, 1},
    {"pcadapt_scaleTau2_matrix", (DL_FUNC) &pcadapt_scaleTau2_matrix, 1},
    {"pcadapt_scaleTau2_vector", (DL_FUNC) &pcadapt_scaleTau2_vector, 1},
    {"pcadapt_covGK_cpp", (DL_FUNC) &pcadapt_covGK_cpp, 2},
    {"pcadapt_ogk_step", (DL_FUNC) &pcadapt_ogk_step, 1},
    {"pcadapt_getDistance_cpp", (DL_FUNC) &pcadapt_getDistance_cpp, 3},
    {"pcadapt_covRob_cpp", (DL_FUNC) &pcadapt_covRob_cpp, 1},
    {"pcadapt_print_convert", (DL_FUNC) &pcadapt_print_convert, 5},
    {"pcadapt_ped2pcadapt", (DL_FUNC) &pcadapt_ped2pcadapt, 2},
    {"pcadapt_lfmm2pcadapt", (DL_FUNC) &pcadapt_lfmm2pcadapt, 2},
    {"pcadapt_sample_geno_matrix", (DL_FUNC) &pcadapt_sample_geno_matrix, 3},
    {"pcadapt_get_pop_size", (DL_FUNC) &pcadapt_get_pop_size, 2},
    {"pcadapt_updt_centroids_cpp", (DL_FUNC) &pcadapt_updt_centroids_cpp, 6},
    {"pcadapt_updt_simplex_cpp", (DL_FUNC) &pcadapt_updt_simplex_cpp, 4},
    {"pcadapt_slidingWindows_fast", (DL_FUNC) &pcadapt_slidingWindows_fast, 8},
    {"pcadapt_get_size_cpp", (DL_FUNC) &pcadapt_get_size_cpp, 1},
    {"pcadapt_get_nb_ind", (DL_FUNC) &pcadapt_get_nb_ind, 2},
    {"pcadapt_cmpt_minor_af", (DL_FUNC) &pcadapt_cmpt_minor_af, 2},
    {"pcadapt_scale_geno", (DL_FUNC) &pcadapt_scale_geno, 4},
    {"pcadapt_cmpt_loadings", (DL_FUNC) &pcadapt_cmpt_loadings, 10},
    {"pcadapt_lrfunc_cpp", (DL_FUNC) &pcadapt_lrfunc_cpp, 10},
    {"pcadapt_sample_geno_file", (DL_FUNC) &pcadapt_sample_geno_file, 4},
    {"pcadapt_get_geno_char", (DL_FUNC) &pcadapt_get_geno_char, 1},
    {"pcadapt_get_geno_int", (DL_FUNC) &pcadapt_get_geno_int, 1},
    {"pcadapt_check_line_na", (DL_FUNC) &pcadapt_check_line_na, 2},
    {"pcadapt_vcf_convert", (DL_FUNC) &pcadapt_vcf_convert, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_pcadapt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
